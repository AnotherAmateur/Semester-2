// класс SimpleVector


#include <iostream>

using namespace std;

template <class T>	// шаблонный двусвязный список
class List
{
	struct Element
	{
		T inf;
		Element* next;
		Element* prev;
		Element(T data) : inf(data), next(nullptr), prev(nullptr) {};
	};

	Element* head;
	Element* tail;

public:

	List() : head(nullptr), tail(nullptr) {};
	~List() {};

	void Push(int data);	// добавить в конец списка

	template <class U>
	friend ostream& operator << (ostream& out, const List<U> obj);	// вывод всего списка в консоль

	void RemoveAll(int data);	// удалить все элементы, равные data, в этом списке

	List<T> CpyExclude(int data) const;	// вернуть новый список без элемента data

};

template<class T>
void List<T>::Push(int data)
{
	Element* newPtr = new Element(data);

	if (!head) {
		head = newPtr;
		tail = head;
	}

	else {

		tail->next = newPtr;
		(tail->next)->prev = tail;
		tail = newPtr;
	}

}

template<class T>
void List<T>::RemoveAll(int data)
{

	Element* ptr = head;

	while (ptr)	// пока ptr != nullptr

		if (ptr->inf == data) {

			Element* trash = ptr;

			if (ptr == head) {	// если удаляем первый элемент

				head = ptr->next;
				head->prev = nullptr;

				ptr = head;

				delete trash;

				continue;
			}

			if (ptr == tail) {	// если удаляем последний элемент

				tail = ptr->prev;
				tail->next = nullptr;

				ptr = nullptr;

				delete trash;
				continue;
			}

			(ptr->prev)->next = ptr->next;	// если удаляем любой другой элемент
			(ptr->next)->prev = ptr->prev;

			ptr = ptr->next;

			delete trash;

		}

		else ptr = ptr->next;	// следующий элемент списка

}

template<class T>
List<T> List<T>::CpyExclude(int data) const
{
	List <T> newList;

	Element* pointer = head;

	while (pointer) {	// пока ptr != nullptr

		if (pointer->inf != data)	// если встречаем элемент data - пропускаем
			newList.Push(pointer->inf);

		pointer = pointer->next;
	}

	return newList;

}



template<class T>
ostream& operator<<(ostream& out, const List<T> obj)
{

	auto* pointer = obj.head;

	while (pointer) {
		out << pointer->inf << ' ';
		pointer = pointer->next;
	}

	return out;

}

int main()
{
	List <int> one, two;
	one.Push(3);
	one.Push(1);
	one.Push(3);
	one.Push(2);
	one.Push(3);
	one.Push(3);

	two = one.CpyExclude(3);

	two.Push(5);

	cout << one;
}
